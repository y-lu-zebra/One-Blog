version: '3.9'

services:
  one-db:
    container_name: one-db
    hostname: one-db
    build:
      context: .
      dockerfile: containers/one-db/Dockerfile
      args:
        - UID=${UID}
        - GID=${GID}
    platform: linux/x86_64
    environment:
      TZ: ${APP_TIME_ZONE}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_INITDB_ARGS: '--auth=md5'
    volumes:
      - ./db:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U "${DB_USER:-postgres}" || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: '512m'
        max-file: '30'
    ports:
      - '5432:5432'
    restart: always
    networks:
      - one-net

  one-api:
    container_name: one-api
    hostname: one-api
    user: ${UID}:${GID}
    build:
      context: .
      dockerfile: containers/one-api/Dockerfile
      args:
        - UID=${UID}
        - GID=${GID}
        - USERNAME=${USERNAME}
    environment:
      TZ: ${APP_TIME_ZONE}
    restart: always
    volumes:
      - .:/code
    logging:
      driver: json-file
      options:
        max-size: '512m'
        max-file: '30'
    command: >
      sh -c "
      cd /code &&
      bash admin.sh init --prod --back &&
      bash admin.sh start --back"
    depends_on:
      one-db:
        condition: service_healthy
    networks:
      - one-net

  one-ui:
    container_name: one-ui
    hostname: one-ui
    user: ${UID}:${GID}
    build:
      context: .
      dockerfile: containers/one-ui/Dockerfile
      args:
        - UID=${UID}
        - GID=${GID}
    platform: linux/x86_64
    environment:
      TZ: ${APP_TIME_ZONE}
    volumes:
      - .:/code
    logging:
      driver: json-file
      options:
        max-size: '512m'
        max-file: '30'
    command: >
      sh -c "
      sleep 5 &&
      cd /code &&
      bash admin.sh init --prod --front &&
      bash admin.sh start --front"
    ports:
      - '3000:3000'
    restart: always
    networks:
      - one-net

  one-server:
    container_name: one-server
    hostname: one-server
    user: ${UID}:${GID}
    build:
      context: .
      dockerfile: containers/one-server/Dockerfile
      args:
        - UID=${UID}
        - GID=${GID}
    volumes:
      - ./containers/one-server/nginx.conf:/etc/nginx/nginx.conf
      - ./one/static:/usr/share/nginx/static
      - ./containers/one-server/ssl-cert:/etc/letsencrypt
    logging:
      driver: json-file
      options:
        max-size: '512m'
        max-file: '30'
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - one-api
      - one-ui
    restart: always
    networks:
      - one-net

networks:
  one-net:
    external: false
