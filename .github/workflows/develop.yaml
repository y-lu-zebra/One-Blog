name: Development

on: [push]

jobs:
  check-backend:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Initializing
        run: |
          cp .env.test .env
          bash admin.sh init --dev --back

      - name: Run Flake8
        run: flake8 --config backend/setup.cfg

      - name: Run Black
        uses: psf/black@stable

      - name: Run isort
        uses: isort/isort-action@v1
        with:
          configuration: --settings-file backend/pyproject.toml
          requirements-files: "backend/requirements/dev.txt"

      - name: Run mypy
        uses: sasanquaneuf/mypy-github-action@releases/v1.3

      - name: Run docformatter
        run: docformatter -r backend

      - name: Run Tests
        run: |
          cd backend
          python manage.py test

      - name: Coverage report
        run: |
          cd backend
          coverage run manage.py test
          coverage report
          coverage html
          coverage xml

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: backend/coverage.xml
          badge: true
          format: markdown
          output: both

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Write to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: Backend-Coverage-Report
          path: backend/htmlcov

  lint-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Run Prettier
        id: prettier-run
        uses: rutajdash/prettier-cli-action@v1.0.1
        with:
          config_path: ./.prettierrc.toml

      - name: Prettier Output
        if: ${{ failure() }}
        shell: bash
        run: |
          echo "The following files are not formatted:"
          echo "${{steps.prettier-run.outputs.prettier_output}}"

      - name: Run ESLint
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          workdir: frontend
          eslint_flags: "src/**/*.{ts,tsx}"
          fail_on_error: true

  ut-frontend:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    needs: lint-frontend
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          cd frontend
          npm install

      - name: Run Tests
        run: |
          cd frontend
          npm run test
